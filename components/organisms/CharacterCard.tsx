/**
 * @file CharacterCard.tsx
 * @description Renders the detailed view for a single character. This component is now fully data-driven,
 * rendering its sidebar actions dynamically based on the character's `components` array and the
 * central `componentRegistry`.
 */

import React from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Character, PlayerAction, DataComponent, DialogueData } from '../../types';
import { toggleSuspect, selectAllObjects } from '../../store/storySlice';
import { showModal, goBack, setActiveCard } from '../../store/uiSlice';
import { AppDispatch, RootState } from '../../store';
import ImageWithLoader from '../molecules/ImageWithLoader';
import ToggleButton from '../atoms/ToggleButton';
import SidebarActionButton from '../atoms/SidebarActionButton';
import { useADA } from '../../hooks/useADA';
import { useCardImage } from '../../hooks/useCardImage';
import { COMPONENT_REGISTRY } from './componentRegistry';
import { History, Mic, ArrowLeft } from 'lucide-react';
import Button from '../atoms/Button';

// --- Canonical List of Character Actions ---
// This fixed array defines exactly which buttons should appear on a character card and in what order.
const CHARACTER_ACTION_KEYS = ['socialMedia', 'phoneLog', 'cctv', 'records', 'file'];

// A map for special component types to their corresponding card types.
const COMPONENT_TO_CARD_TYPE_MAP: { [key: string]: string } = {
  socialMedia: 'socialMediaFeed',
  file: 'mugshot',
};

// --- ARCHITECTURAL FIX: Correct data mapping ---
// This map correctly translates the keys used for the UI buttons ('phoneLog', 'cctv', etc.)
// to the specific category strings used in the StoryObject data model ('phone_log', 'cctv_sighting', etc.).
// This resolves the bug where the sidebar buttons were always disabled because the previous
// direct string comparison was failing.
const CATEGORY_MAP: { [key: string]: string } = {
  socialMedia: 'socialMedia', // This one matches
  phoneLog: 'phone_log',
  cctv: 'cctv_sighting',
  records: 'financial_record',
  file: 'police_file',
};


const CharacterCard: React.FC<{ character: Character }> = ({ character }) => {
  const dispatch = useDispatch<AppDispatch>();
  const triggerADA = useADA();
  const isVictim = character.role === 'victim';
  
  // A single selector to get all relevant objects for this character.
  const characterObjects = useSelector((state: RootState) => 
      selectAllObjects(state).filter(obj => obj.ownerCharacterId === character.id)
  );

  const handleGoBack = () => {
    dispatch(goBack());
    triggerADA(PlayerAction.VIEW_LIST, 'Player has returned to the previous list view.');
  };

  const handleSuspectToggle = (isNowSuspect: boolean) => {
    dispatch(toggleSuspect({ id: character.id, isSuspect: isNowSuspect }));
    const actionText = isNowSuspect ? `has marked ${character.name} as a suspect.` : `has cleared ${character.name} of suspicion.`;
    triggerADA(PlayerAction.TOGGLE_SUSPECT, actionText, character.imagePrompt);
  };

  // Special handler for replaying the introductory slideshow, a unique action for the victim.
  const handleReplayIntro = () => {
    dispatch(showModal({ type: 'introSlideshow' }));
  };
  
  const dialogueData = character.components.find(c => c.type === 'dialogue')?.props as DialogueData | undefined;
  
  const handleDialogueClick = () => {
      if (!dialogueData) return;
      // Navigate to the unified DialogueCard.
      dispatch(setActiveCard({ 
          id: character.id, 
          type: 'dialogue',
      }));
  };
  
  const colorTreatment = (character.isSuspect || character.role === 'victim') ? 'selectiveColor' : 'monochrome';
  const { imageUrl, isLoading } = useCardImage(character, colorTreatment);

  /**
   * --- Core Architectural Pattern: Data-Driven Sidebar Actions ---
   * The action buttons are generated by iterating through the canonical list of character-specific
   * action keys. This ensures every character card has the same consistent set of 5 buttons,
   * which are then enabled or disabled based on whether the character has the corresponding data.
   */
  const renderSidebarActions = () => {
    // Iterate over the fixed list of character action keys.
    return CHARACTER_ACTION_KEYS.map(componentType => {
      const registryEntry = COMPONENT_REGISTRY[componentType];
      if (!registryEntry) return null; // Should not happen

      // Get the correct category string from the map.
      const targetCategory = CATEGORY_MAP[componentType];

      // Check if there are any objects of this category for the current character.
      const hasData = characterObjects.some(obj => obj.category === targetCategory);
      
      // The button is disabled if no data exists.
      const isDisabled = !hasData;

      const handleClick = () => {
        if (isDisabled) return;
        
        // Use the map for special cases, otherwise default to the generic 'collection' card.
        const cardType = COMPONENT_TO_CARD_TYPE_MAP[componentType] || 'collection';
        
        dispatch(setActiveCard({ 
            id: character.id, 
            type: cardType as any, // Cast as any to satisfy the complex CardType union
            collectionType: cardType === 'collection' ? componentType : undefined,
            title: registryEntry.label,
        }));
      };

      return (
        <SidebarActionButton
          key={componentType}
          label={registryEntry.label}
          Icon={registryEntry.Icon}
          onClick={handleClick}
          disabled={isDisabled}
        />
      );
    });
  };

  return (
    <div className="w-full h-full flex flex-col bg-brand-surface animate-slide-in-bottom">
      <div className="relative w-full h-auto aspect-[3/4] flex-shrink-0 bg-brand-bg">
        <ImageWithLoader imageUrl={imageUrl} isLoading={isLoading} alt={character.name} />
        
        <div className="absolute top-1/2 right-2 -translate-y-1/2 z-10 flex flex-col gap-2">
          {renderSidebarActions()}
        </div>
        
        {/* Back button is now overlaid on the image for a more integrated feel */}
        <button
          onClick={handleGoBack}
          className="absolute top-4 left-4 p-2 rounded-full text-white bg-black/50 hover:bg-brand-primary transition-colors z-10"
          aria-label="Go back"
        >
          <ArrowLeft size={24} />
        </button>

        <div className="absolute inset-0 bg-gradient-to-t from-brand-surface via-brand-surface/70 to-transparent"></div>
      </div>

      <div className="flex-1 w-full p-4 pb-24 -mt-16 overflow-y-auto z-10">
        <header className='flex items-end justify-between gap-4 mb-4'>
          <div className="flex-1">
            <h1 className="text-6xl font-oswald text-white uppercase tracking-tighter leading-tight">{character.name}</h1>
            <p className="text-brand-text-muted text-lg">{character.occupation}</p>
          </div>
          {character.role === 'suspect' && (
            <div className="flex items-center gap-3 pb-1 flex-shrink-0">
              <label className="font-oswald text-brand-text uppercase tracking-wider text-sm">Suspect</label>
              <ToggleButton
                accessibleLabel={`Mark ${character.name} as a suspect`}
                toggled={character.isSuspect}
                onToggle={handleSuspectToggle}
              />
            </div>
          )}
        </header>
        
        <p className="text-white mt-4 leading-relaxed">{character.description}</p>
        
        {dialogueData && (
             <div className="mt-6 border-t border-brand-border/50 pt-6">
                <Button
                onClick={handleDialogueClick}
                className="w-full flex items-center justify-center gap-2 uppercase font-oswald tracking-wider"
                variant={character.role === 'suspect' ? 'primary' : 'secondary'}
                >
                <Mic size={16} />
                {dialogueData.buttonText}
                </Button>
            </div>
        )}

        {isVictim && (
          <div className="mt-6 border-t border-brand-border/50 pt-6">
            <Button
              onClick={handleReplayIntro}
              className="w-full flex items-center justify-center gap-2 uppercase font-oswald tracking-wider"
              variant="secondary"
            >
              <History size={16} />
              Replay Introduction
            </Button>
          </div>
        )}
      </div>
    </div>
  );
};

export default CharacterCard;